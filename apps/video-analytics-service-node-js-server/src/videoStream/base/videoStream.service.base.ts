/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, VideoStream as PrismaVideoStream } from "@prisma/client";

export class VideoStreamServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.VideoStreamCountArgs, "select">
  ): Promise<number> {
    return this.prisma.videoStream.count(args);
  }

  async videoStreams(
    args: Prisma.VideoStreamFindManyArgs
  ): Promise<PrismaVideoStream[]> {
    return this.prisma.videoStream.findMany(args);
  }
  async videoStream(
    args: Prisma.VideoStreamFindUniqueArgs
  ): Promise<PrismaVideoStream | null> {
    return this.prisma.videoStream.findUnique(args);
  }
  async createVideoStream(
    args: Prisma.VideoStreamCreateArgs
  ): Promise<PrismaVideoStream> {
    return this.prisma.videoStream.create(args);
  }
  async updateVideoStream(
    args: Prisma.VideoStreamUpdateArgs
  ): Promise<PrismaVideoStream> {
    return this.prisma.videoStream.update(args);
  }
  async deleteVideoStream(
    args: Prisma.VideoStreamDeleteArgs
  ): Promise<PrismaVideoStream> {
    return this.prisma.videoStream.delete(args);
  }
}
