/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, TextDetection as PrismaTextDetection } from "@prisma/client";

export class TextDetectionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TextDetectionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.textDetection.count(args);
  }

  async textDetections(
    args: Prisma.TextDetectionFindManyArgs
  ): Promise<PrismaTextDetection[]> {
    return this.prisma.textDetection.findMany(args);
  }
  async textDetection(
    args: Prisma.TextDetectionFindUniqueArgs
  ): Promise<PrismaTextDetection | null> {
    return this.prisma.textDetection.findUnique(args);
  }
  async createTextDetection(
    args: Prisma.TextDetectionCreateArgs
  ): Promise<PrismaTextDetection> {
    return this.prisma.textDetection.create(args);
  }
  async updateTextDetection(
    args: Prisma.TextDetectionUpdateArgs
  ): Promise<PrismaTextDetection> {
    return this.prisma.textDetection.update(args);
  }
  async deleteTextDetection(
    args: Prisma.TextDetectionDeleteArgs
  ): Promise<PrismaTextDetection> {
    return this.prisma.textDetection.delete(args);
  }
}
